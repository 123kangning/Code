--- a/pkg/datasource/sql/exec/at/select_for_update_executor.go
+++ b/pkg/datasource/sql/exec/at/select_for_update_executor.go
@@ -134,7 +134,8 @@ func (s *selectForUpdateExecutor) ExecContext(ctx context.Context, f exec.Callba
                }
                return nil, err
        }
-
+       s.execContext.TxCtx.RoundImages.AppendBeofreImage(types.NewEmptyRecordImage(s.metaData, types.SQLTypeSelectForUpdate))
+       s.execContext.TxCtx.RoundImages.AppendAfterImage(types.NewEmptyRecordImage(s.metaData, types.SQLTypeSelectForUpdate))
        if originalAutoCommit {
                if err = s.tx.Commit(); err != nil {
                        return nil, err
@@ -208,7 +209,7 @@ func (s *selectForUpdateExecutor) doExecContext(ctx context.Context, f exec.Call
        if !lockable {
                return nil, lockConflictError
        }
-
+       s.execContext.TxCtx.LockKeys[lockKey] = struct{}{}
        return result, nil
 }
 
diff --git a/pkg/datasource/sql/tx.go b/pkg/datasource/sql/tx.go
index 405c03c..bd6e410 100644
--- a/pkg/datasource/sql/tx.go
+++ b/pkg/datasource/sql/tx.go
@@ -148,7 +148,7 @@ func (tx *Tx) register(ctx *types.TransactionContext) error {
        if ctx.TransactionMode.BranchType() == branch.BranchTypeUnknow {
                return nil
        }
-
+       log.Infof("ctx.LockKeys = %v,before image = %v", ctx.LockKeys, ctx.RoundImages.BeofreImages().Reserve)
        if ctx.TransactionMode.BranchType() == branch.BranchTypeAT && !ctx.HasUndoLog() || !ctx.HasLockKey() {
                return nil
        }


--- a/pkg/datasource/sql/conn_at.go
+++ b/pkg/datasource/sql/conn_at.go
@@ -62,6 +62,7 @@ func (c *ATConn) QueryContext(ctx context.Context, query string, args []driver.N
                        Query:                query,
                        NamedValues:          args,
                        Conn:                 c.targetConn,
+                       DBName:               c.dbName,
                        IsSupportsSavepoints: true,
                        IsAutoCommit:         c.GetAutoCommit(),
                }
diff --git a/pkg/datasource/sql/exec/at/select_for_update_executor.go b/pkg/datasource/sql/exec/at/select_for_update_executor.go
index 3e51a97..162438f 100644
--- a/pkg/datasource/sql/exec/at/select_for_update_executor.go
+++ b/pkg/datasource/sql/exec/at/select_for_update_executor.go
@@ -322,7 +322,7 @@ func (s *selectForUpdateExecutor) exec(ctx context.Context, sql string, nvdargs
                        _ = rows.Close()
                }
        }()
-
+       fmt.Printf("\n!!!!!!!!!!!!!!\nerr = %v\n!!!!!!!!!!!!!!!!\n", err)
        if err != nil {
                return nil, err
        }
//queryContext bug
2023-05-09 14:28:56.377         INFO    at/select_for_update_executor.go:253            build select sql by update sourceQuery, 
sql {}%!(EXTRA string=SELECT SQL_NO_CACHE id FROM order_tbl WHERE id=? FOR UPDATE)
[mysql] 2023/05/09 14:28:56 connection.go:207: busy buffer

//exec
at.(*selectForUpdateExecutor).ExecContext (select_for_update_executor.go:113) github.com/seata/seata-go/pkg/datasource/sql/exec/at
at.(*ATExecutor).ExecWithNamedValue (at_executor.go:76) github.com/seata/seata-go/pkg/datasource/sql/exec/at
sql.(*ATConn).ExecContext.func2 (conn_at.go:109) github.com/seata/seata-go/pkg/datasource/sql
sql.(*ATConn).createNewTxOnExecIfNeed (conn_at.go:188) github.com/seata/seata-go/pkg/datasource/sql
sql.(*ATConn).ExecContext (conn_at.go:93) github.com/seata/seata-go/pkg/datasource/sql
sql.ctxDriverExec (ctxutil.go:31) database/sql
sql.(*DB).execDC.func2 (sql.go:1675) database/sql
sql.withLock (sql.go:3405) database/sql
sql.(*DB).execDC (sql.go:1670) database/sql
sql.(*DB).exec (sql.go:1655) database/sql
sql.(*DB).ExecContext.func1 (sql.go:1634) database/sql
sql.(*DB).retry (sql.go:1538) database/sql
sql.(*DB).ExecContext (sql.go:1633) database/sql
main.selectForUpdateData (select_for_update.go:31) main
tm.WithGlobalTx (transaction_executor.go:80) github.com/seata/seata-go/pkg/tm
main.sampleSelectForUpdate (select_for_update.go:49) main
main.main (main.go:42) main
runtime.main (proc.go:250) runtime
runtime.goexit (asm_amd64.s:1598) runtime
 - 异步堆栈跟踪
<autogenerated>:2
//query
at.(*selectForUpdateExecutor).ExecContext (select_for_update_executor.go:113) github.com/seata/seata-go/pkg/datasource/sql/exec/at
at.(*ATExecutor).ExecWithNamedValue (at_executor.go:76) github.com/seata/seata-go/pkg/datasource/sql/exec/at
sql.(*ATConn).QueryContext.func2 (conn_at.go:70) github.com/seata/seata-go/pkg/datasource/sql
sql.(*ATConn).createNewTxOnExecIfNeed (conn_at.go:188) github.com/seata/seata-go/pkg/datasource/sql
sql.(*ATConn).QueryContext (conn_at.go:54) github.com/seata/seata-go/pkg/datasource/sql
sql.ctxDriverQuery (ctxutil.go:48) database/sql
sql.(*DB).queryDC.func1 (sql.go:1748) database/sql
sql.withLock (sql.go:3405) database/sql
sql.(*DB).queryDC (sql.go:1743) database/sql
sql.(*DB).query (sql.go:1726) database/sql
sql.(*DB).QueryContext.func1 (sql.go:1704) database/sql
sql.(*DB).retry (sql.go:1538) database/sql
sql.(*DB).QueryContext (sql.go:1703) database/sql
main.selectForUpdateData (select_for_update.go:30) main
tm.WithGlobalTx (transaction_executor.go:80) github.com/seata/seata-go/pkg/tm
main.sampleSelectForUpdate (select_for_update.go:49) main
main.main (main.go:42) main
runtime.main (proc.go:250) runtime
runtime.goexit (asm_amd64.s:1598) runtime
 - 异步堆栈跟踪
<autogenerated>:2